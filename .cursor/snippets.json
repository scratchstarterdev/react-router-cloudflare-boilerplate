{
  "ScratchStarter Config": {
    "prefix": "ss-config",
    "body": [
      "import defineConfig from '@/lib/config';",
      "import type { ${1:ConfigType} } from '@/types/config';",
      "",
      "export default defineConfig<${1:ConfigType}>({",
      "  ${2:// Configuration properties}",
      "});"
    ],
    "description": "Create a new ScratchStarter configuration file"
  },

  "ScratchStarter Component": {
    "prefix": "ss-component",
    "body": [
      "import { cn } from '@/lib/utils';",
      "",
      "interface ${1:ComponentName}Props {",
      "  className?: string;",
      "  ${2:// Additional props}",
      "}",
      "",
      "export function ${1:ComponentName}({ className, ${3:...props} }: ${1:ComponentName}Props) {",
      "  return (",
      "    <div className={cn('${4:// Base classes}', className)}>",
      "      ${5:// Component content}",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a new ScratchStarter component with proper TypeScript structure"
  },

  "ScratchStarter Server Page": {
    "prefix": "ss-page-server",
    "body": [
      "import { Metadata } from 'next';",
      "import { getLocale } from 'next-intl/server';",
      "",
      "import { createMetadata } from '@/lib/metadata';",
      "",
      "export async function generateMetadata(): Promise<Metadata> {",
      "  return createMetadata({",
      "    title: '${1:Page Title}',",
      "    description: '${2:Page Description}',",
      "  });",
      "}",
      "",
      "export default async function ${3:PageName}() {",
      "  const locale = await getLocale();",
      "  ",
      "  return (",
      "    <div className=\"${4:container mx-auto px-4}\">",
      "      ${5:// Page content}",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a new server page with metadata and locale support"
  },

  "ScratchStarter Client Component": {
    "prefix": "ss-client",
    "body": [
      "'use client';",
      "",
      "import { useState } from 'react';",
      "import { cn } from '@/lib/utils';",
      "",
      "interface ${1:ComponentName}Props {",
      "  className?: string;",
      "  ${2:// Additional props}",
      "}",
      "",
      "export function ${1:ComponentName}({ className, ${3:...props} }: ${1:ComponentName}Props) {",
      "  const [${4:state}, set${4/(.*)/${1:/capitalize}/}] = useState(${5:initialValue});",
      "",
      "  return (",
      "    <div className={cn('${6:// Base classes}', className)}>",
      "      ${7:// Component content}",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a new client component with useState"
  },

  "ScratchStarter API Route": {
    "prefix": "ss-api",
    "body": [
      "import { NextRequest, NextResponse } from 'next/server';",
      "import { auth } from '@/lib/auth';",
      "",
      "export async function GET(request: NextRequest) {",
      "  try {",
      "    const session = await auth.api.getSession({ headers: request.headers });",
      "    ",
      "    if (!session) {",
      "      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });",
      "    }",
      "",
      "    ${1:// API logic here}",
      "",
      "    return NextResponse.json({ ${2:data} });",
      "  } catch (error) {",
      "    console.error('API Error:', error);",
      "    return NextResponse.json(",
      "      { error: 'Internal Server Error' },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}",
      "",
      "export async function POST(request: NextRequest) {",
      "  try {",
      "    const session = await auth.api.getSession({ headers: request.headers });",
      "    ",
      "    if (!session) {",
      "      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });",
      "    }",
      "",
      "    const body = await request.json();",
      "    ${3:// Validate and process body}",
      "",
      "    return NextResponse.json({ ${4:result} });",
      "  } catch (error) {",
      "    console.error('API Error:', error);",
      "    return NextResponse.json(",
      "      { error: 'Internal Server Error' },",
      "      { status: 500 }",
      "    );",
      "  }",
      "}"
    ],
    "description": "Create a new API route with authentication and error handling"
  },

  "ScratchStarter Blog Content": {
    "prefix": "ss-blog",
    "body": [
      "import { getLocale } from 'next-intl/server';",
      "import { blogSource } from '@/lib/content';",
      "",
      "export default async function ${1:BlogComponent}() {",
      "  const locale = await getLocale();",
      "  const allPages = blogSource.getPages(locale);",
      "  ",
      "  const sortedBlogs = allPages",
      "    .sort((a, b) => {",
      "      const dateA = new Date(a.data.date).getTime();",
      "      const dateB = new Date(b.data.date).getTime();",
      "      return dateB - dateA;",
      "    })",
      "    .filter((post) => post.locale === locale);",
      "",
      "  return (",
      "    <div className=\"${2:grid gap-6}\">",
      "      {sortedBlogs.map((blog) => (",
      "        <div key={blog.url}>",
      "          ${3:// Blog item content}",
      "        </div>",
      "      ))}",
      "    </div>",
      "  );",
      "}"
    ],
    "description": "Create a blog component with content fetching"
  },

  "ScratchStarter Form": {
    "prefix": "ss-form",
    "body": [
      "'use client';",
      "",
      "import { useState } from 'react';",
      "import { useForm } from 'react-hook-form';",
      "import { zodResolver } from '@hookform/resolvers/zod';",
      "import * as z from 'zod';",
      "",
      "import { Button } from '@/components/ui/button';",
      "import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';",
      "import { Input } from '@/components/ui/input';",
      "",
      "const formSchema = z.object({",
      "  ${1:field}: z.string().min(1, '${2:Field is required}'),",
      "});",
      "",
      "type FormData = z.infer<typeof formSchema>;",
      "",
      "export function ${3:FormComponent}() {",
      "  const [isSubmitting, setIsSubmitting] = useState(false);",
      "",
      "  const form = useForm<FormData>({",
      "    resolver: zodResolver(formSchema),",
      "    defaultValues: {",
      "      ${1:field}: '',",
      "    },",
      "  });",
      "",
      "  async function onSubmit(data: FormData) {",
      "    setIsSubmitting(true);",
      "    try {",
      "      ${4:// Submit logic}",
      "    } catch (error) {",
      "      console.error('Form submission error:', error);",
      "    } finally {",
      "      setIsSubmitting(false);",
      "    }",
      "  }",
      "",
      "  return (",
      "    <Form {...form}>",
      "      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">",
      "        <FormField",
      "          control={form.control}",
      "          name=\"${1:field}\"",
      "          render={({ field }) => (",
      "            <FormItem>",
      "              <FormLabel>${5:Field Label}</FormLabel>",
      "              <FormControl>",
      "                <Input placeholder=\"${6:Enter value}\" {...field} />",
      "              </FormControl>",
      "              <FormMessage />",
      "            </FormItem>",
      "          )}",
      "        />",
      "        <Button type=\"submit\" disabled={isSubmitting}>",
      "          {isSubmitting ? 'Submitting...' : '${7:Submit}'}",
      "        </Button>",
      "      </form>",
      "    </Form>",
      "  );",
      "}"
    ],
    "description": "Create a form component with validation using react-hook-form and zod"
  },

  "ScratchStarter Email Template": {
    "prefix": "ss-email",
    "body": [
      "import {",
      "  Html,",
      "  Head,",
      "  Body,",
      "  Container,",
      "  Section,",
      "  Text,",
      "  Link,",
      "  Button,",
      "} from '@react-email/components';",
      "",
      "interface ${1:EmailTemplate}Props {",
      "  ${2:// Email props}",
      "}",
      "",
      "export default function ${1:EmailTemplate}({ ${3:props} }: ${1:EmailTemplate}Props) {",
      "  return (",
      "    <Html>",
      "      <Head />",
      "      <Body style={main}>",
      "        <Container style={container}>",
      "          <Section>",
      "            <Text style={heading}>${4:Email Title}</Text>",
      "            <Text style={paragraph}>",
      "              ${5:Email content}",
      "            </Text>",
      "            <Button style={button} href=\"${6:#}\">",
      "              ${7:Button Text}",
      "            </Button>",
      "          </Section>",
      "        </Container>",
      "      </Body>",
      "    </Html>",
      "  );",
      "}",
      "",
      "const main = {",
      "  backgroundColor: '#ffffff',",
      "  fontFamily: '-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Oxygen-Sans,Ubuntu,Cantarell,\"Helvetica Neue\",sans-serif',",
      "};",
      "",
      "const container = {",
      "  margin: '0 auto',",
      "  padding: '20px 0 48px',",
      "  width: '580px',",
      "};",
      "",
      "const heading = {",
      "  fontSize: '24px',",
      "  fontWeight: 'bold',",
      "  margin: '0 0 20px',",
      "};",
      "",
      "const paragraph = {",
      "  fontSize: '16px',",
      "  lineHeight: '24px',",
      "  margin: '0 0 20px',",
      "};",
      "",
      "const button = {",
      "  backgroundColor: '#000',",
      "  borderRadius: '5px',",
      "  color: '#fff',",
      "  fontSize: '16px',",
      "  fontWeight: 'bold',",
      "  textDecoration: 'none',",
      "  textAlign: 'center' as const,",
      "  display: 'block',",
      "  width: '200px',",
      "  padding: '14px 7px',",
      "};"
    ],
    "description": "Create an email template using React Email components"
  }
}
